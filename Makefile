# Makefile for KServer
#
# Generated by devgen
# Sat Dec  5 16:45:32 2015
#
# (c) Koheron, 2014-2015

#TARGET_HOST = arm
#TARGET_HOST = local

ADD_DEBUG_FLAGS = false

# Middleware include path
MIDWARE_INC_PATH=middleware

DEFINES = -DDEBUG_KSERVER -D_GLIBCXX_USE_NANOSLEEP
#DEFINES = -DRELEASE_KSERVER -D_GLIBCXX_USE_NANOSLEEP

# --------------------------------------------------------------
# Objects to build
# --------------------------------------------------------------

# Objects in KServer
OBJS_KSERVER = core/kserver.o              \
               core/listening_channel.o    \
               core/kserver_commands.o     \
               core/session_manager.o      \
               core/kserver_session.o      \
               core/devices_manager.o      \
               core/peer_info.o            \
               core/commands.o             \
               core/kdevice.o              \
               core/websocket.o            \
               core/gason.o                \
               core/config.o               \
               core/crypto/base64.o        \
               core/crypto/sha1.o          \
               core/kserver_syslog.o       \
               core/socket_interface.o     \
               core/signal_handler.o       \
               core/perf_monitor.o
               
# Object in KServer/devices
OBJS_KS_DEV ?=  devices/ks_dev_mem.o  devices/ks_init_tasks.o 

# Objects in Middleware
SRC_MIDWARE = $(shell find middleware/ -name '*.cpp')
OBJS_MIDWARE = $(subst .cpp,.o, $(SRC_MIDWARE))

# All objects 		
OBJS = $(OBJS_MIDWARE) $(OBJS_KSERVER) $(OBJS_KS_DEV) main.o	
# List of raw source files (all object files, renamed from .o to .c)
SRCS = $(subst .o,.c, $(OBJS), ))

# Executable name
TARGET=kserverd

# --------------------------------------------------------------
# Toolchains
# --------------------------------------------------------------

ifeq ($(TARGET_HOST),arm)
  #CROSS_COMPILE?=arm-linux-gnueabi-
  CROSS_COMPILE?=arm-linux-gnueabihf-
  #CROSS_COMPILE?=arm-xilinx-linux-gnueabi-
else ifeq ($(TARGET_HOST),local)
  CROSS_COMPILE?=
  DEFINES += -DLOCAL
endif

# Main GCC executable (used for compiling and linking)
CC=$(CROSS_COMPILE)gcc
CCPP=$(CROSS_COMPILE)g++

# --------------------------------------------------------------
# GCC compiling & linking flags
# --------------------------------------------------------------

CFLAGS= -Wall -Werror -I$(MIDWARE_INC_PATH) -I$(MIDWARE_INC_PATH)/libraries $(DEFINES)

# Architecture specific flags
ifeq ($(TARGET_HOST),redpitaya)
  ARM_FLAGS = -march=armv7-a -mtune=cortex-a9 -mfpu=vfpv3 -mfloat-abi=hard
  CFLAGS += $(ARM_FLAGS)
else ifeq ($(TARGET_HOST),local)
  CFLAGS += -march=native
endif

# Add debug/optimization flags
ifeq ($(ADD_DEBUG_FLAGS),true)
  CFLAGS += -rdynamic #-g
  ifeq ($(TARGET_HOST),arm)
    CFLAGS +=-mapcs-frame
  endif
else
  CFLAGS += -O3
endif

CPPFLAGS=$(CFLAGS) -std=c++11 -pthread

# --------------------------------------------------------------
# Libraries
# --------------------------------------------------------------

LIBS = -lm # -lpthread -lssl -lcrypto

# --------------------------------------------------------------
# Targets
# --------------------------------------------------------------

# Main Makefile target 'all' - it iterates over all targets listed in $(TARGET)
# variable.
all: $(TARGET)

# Target with compilation rules to compile object from source files
%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@
	
%.o: %.cpp
	$(CCPP) -c $(CPPFLAGS) $< -o $@

# Makefile target with rules how to link executable for each target from $(TARGET) list.
$(TARGET): $(OBJS)
	$(CCPP) -o $@ $^ $(CPPFLAGS) $(LIBS)

# Clean target - when called it cleans all object files and executables.
clean:
	rm -f $(TARGET) *.o $(OBJS)
