/// @file ks_dev_mem.cpp
///
/// Autogenerated by Kdevgen 
/// (c) Koheron 2014-2015 

#include "ks_dev_mem.hpp"

#include "../core/commands.hpp"
#include "../core/kserver.hpp"
#include "../core/kserver_session.hpp"

namespace kserver {

#define THIS (static_cast<KS_Dev_mem*>(this))

/////////////////////////////////////
// OPEN

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::OPEN> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::OPEN>& args)
{
    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::OPEN> 
        (const Argument<KS_Dev_mem::OPEN>& args, SessID sess_id)
{
    return 0;
}

/////////////////////////////////////
// ADD_MEMORY_MAP

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::ADD_MEMORY_MAP> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::ADD_MEMORY_MAP>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.device_addr = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 1: {
                  args.map_size = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 2) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::ADD_MEMORY_MAP> 
        (const Argument<KS_Dev_mem::ADD_MEMORY_MAP>& args, SessID sess_id)
{
    Klib::MemMapID map_id = THIS->dev_mem.AddMemoryMap(args.device_addr, 
                                                       args.map_size);
    
    if(static_cast<int>(map_id) < 0) {
        if(SEND_CSTR("ERR\n") < 0) {
            return -1;
        }
        
        kserver->syslog.print(SysLog::DEBUG, "[S] ERR\n");
    } else {
        if(SEND<uint32_t>(static_cast<uint32_t>(map_id)) < 0) {
            return -1;
        }
        
        kserver->syslog.print(SysLog::DEBUG, "[S] %u\n",
                              static_cast<uint32_t>(map_id));
    }
    
    return static_cast<int>(map_id);
}

/////////////////////////////////////
// RM_MEMORY_MAP

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::RM_MEMORY_MAP> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::RM_MEMORY_MAP>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 1) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::RM_MEMORY_MAP> 
        (const Argument<KS_Dev_mem::RM_MEMORY_MAP>& args, SessID sess_id)
{
    THIS->dev_mem.RmMemoryMap(args.mmap_idx);
    return 0;
}

/////////////////////////////////////
// READ

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::READ> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::READ>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 2) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::READ> 
        (const Argument<KS_Dev_mem::READ>& args, SessID sess_id)
{
    uint32_t reg_val = Klib::ReadReg32(THIS->dev_mem.GetBaseAddr(args.mmap_idx) 
                                       + args.offset);

    if(SEND<uint32_t>(reg_val) < 0) {
        return -1;
    }
        
    kserver->syslog.print(SysLog::DEBUG, "[S] %u\n", reg_val);

    return 0;
}

/////////////////////////////////////
// WRITE

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::WRITE> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::WRITE>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.reg_val = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 3) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::WRITE> 
        (const Argument<KS_Dev_mem::WRITE>& args, SessID sess_id)
{
    Klib::WriteReg32(THIS->dev_mem.GetBaseAddr(args.mmap_idx) + args.offset, 
                     args.reg_val);
    return 0;
}

/////////////////////////////////////
// WRITE_BUFFER

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::WRITE_BUFFER> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::WRITE_BUFFER>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.len_data = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 3) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::WRITE_BUFFER> 
        (const Argument<KS_Dev_mem::WRITE_BUFFER>& args, SessID sess_id)
{
    const uint32_t* data_ptr = RCV_HANDSHAKE(args.len_data);
    
    if(data_ptr == nullptr) {
        return -1;
    }

    uint32_t base_add = THIS->dev_mem.GetBaseAddr(args.mmap_idx);
    Klib::WriteBuff32(base_add + args.offset, data_ptr, args.len_data);
    
    return 0;
}

/////////////////////////////////////
// READ_BUFFER

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::READ_BUFFER> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::READ_BUFFER>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.buff_size = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 4) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::READ_BUFFER> 
        (const Argument<KS_Dev_mem::READ_BUFFER>& args, SessID sess_id)
{
    int n_bytes_send = SEND_ARRAY<uint32_t>(
            reinterpret_cast<uint32_t*>(THIS->dev_mem.GetBaseAddr(args.mmap_idx) 
                                        + args.offset), args.buff_size);
    
    kserver->syslog.print(SysLog::DEBUG, "[S] [%u bytes]\n", n_bytes_send);
    
    return 0;
}

/////////////////////////////////////
// SET_BIT

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::SET_BIT> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::SET_BIT>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.index = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 3) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::SET_BIT> 
        (const Argument<KS_Dev_mem::SET_BIT>& args, SessID sess_id)
{
    Klib::SetBit(THIS->dev_mem.GetBaseAddr(args.mmap_idx) + args.offset, 
                 args.index);
    return 0;
}

/////////////////////////////////////
// CLEAR_BIT

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::CLEAR_BIT> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::CLEAR_BIT>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.index = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 3) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::CLEAR_BIT> 
        (const Argument<KS_Dev_mem::CLEAR_BIT>& args, SessID sess_id)
{
    Klib::ClearBit(THIS->dev_mem.GetBaseAddr(args.mmap_idx) + args.offset, 
                   args.index);
    return 0;
}

/////////////////////////////////////
// TOGGLE_BIT

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::TOGGLE_BIT> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::TOGGLE_BIT>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.index = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 3) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::TOGGLE_BIT> 
        (const Argument<KS_Dev_mem::TOGGLE_BIT>& args, SessID sess_id)
{
    Klib::ToggleBit(THIS->dev_mem.GetBaseAddr(args.mmap_idx) + args.offset, 
                    args.index);
    return 0;
}

/////////////////////////////////////
// MASK_AND

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::MASK_AND> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::MASK_AND>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.mask = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 3) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::MASK_AND> 
        (const Argument<KS_Dev_mem::MASK_AND>& args, SessID sess_id)
{
    Klib::MaskAnd(THIS->dev_mem.GetBaseAddr(args.mmap_idx) + args.offset, 
                  args.mask);
    return 0;
}

/////////////////////////////////////
// MASK_OR

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        parse_arg<KS_Dev_mem::MASK_OR> (const Command& cmd,
                KDevice<KS_Dev_mem,DEV_MEM>::
                Argument<KS_Dev_mem::MASK_OR>& args)
{
    char tmp_str[2*KSERVER_READ_STR_LEN];

    uint32_t i = 0;
    uint32_t cnt = 0;
    uint32_t param_num = 0;

    while(1) {
        if(cmd.buffer[i]=='\0') {
            break;
        }
        else if(cmd.buffer[i]=='|') {
            tmp_str[cnt] = '\0';

            switch(param_num)
            {
              case 0: {
                  args.mmap_idx = static_cast<Klib::MemMapID>(CSTRING_TO_UINT(tmp_str));
                  break;
              }
              case 1: {
                  args.offset = CSTRING_TO_UINT(tmp_str);
                  break;
              }
              case 2: {
                  args.mask = CSTRING_TO_UINT(tmp_str);
                  break;
              }
            }

            param_num++;
            cnt = 0;
            i++;
        } else {
            tmp_str[cnt] = cmd.buffer[i];
            i++;
            cnt++;
        }
    }

    if(param_num == 0 || param_num > 3) {
        kserver->syslog.print(SysLog::ERROR, "Invalid number of parameters\n");
        return -1;
    }

    return 0;
}

template<>
template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute_op<KS_Dev_mem::MASK_OR> 
        (const Argument<KS_Dev_mem::MASK_OR>& args, SessID sess_id)
{
    Klib::MaskOr(THIS->dev_mem.GetBaseAddr(args.mmap_idx) + args.offset, 
                  args.mask);
    return 0;
}

template<>
bool KDevice<KS_Dev_mem,DEV_MEM>::is_failed(void)
{
    return THIS->dev_mem.IsFailed();
}

template<>
int KDevice<KS_Dev_mem,DEV_MEM>::
        execute(const Command& cmd)
{
    int err;

    switch(cmd.operation) {
      case KS_Dev_mem::OPEN: {
        Argument<KS_Dev_mem::OPEN> args;

        if(parse_arg<KS_Dev_mem::OPEN>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::OPEN>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::ADD_MEMORY_MAP: {
        Argument<KS_Dev_mem::ADD_MEMORY_MAP> args;

        if(parse_arg<KS_Dev_mem::ADD_MEMORY_MAP>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::ADD_MEMORY_MAP>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::RM_MEMORY_MAP: {
        Argument<KS_Dev_mem::RM_MEMORY_MAP> args;

        if(parse_arg<KS_Dev_mem::RM_MEMORY_MAP>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::RM_MEMORY_MAP>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::READ: {
        Argument<KS_Dev_mem::READ> args;

        if(parse_arg<KS_Dev_mem::READ>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::READ>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::WRITE: {
        Argument<KS_Dev_mem::WRITE> args;

        if(parse_arg<KS_Dev_mem::WRITE>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::WRITE>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::WRITE_BUFFER: {
        Argument<KS_Dev_mem::WRITE_BUFFER> args;

        if(parse_arg<KS_Dev_mem::WRITE_BUFFER>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::WRITE_BUFFER>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::READ_BUFFER: {
        Argument<KS_Dev_mem::READ_BUFFER> args;

        if(parse_arg<KS_Dev_mem::READ_BUFFER>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::READ_BUFFER>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::SET_BIT: {
        Argument<KS_Dev_mem::SET_BIT> args;

        if(parse_arg<KS_Dev_mem::SET_BIT>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::SET_BIT>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::CLEAR_BIT: {
        Argument<KS_Dev_mem::CLEAR_BIT> args;

        if(parse_arg<KS_Dev_mem::CLEAR_BIT>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::CLEAR_BIT>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::TOGGLE_BIT: {
        Argument<KS_Dev_mem::TOGGLE_BIT> args;

        if(parse_arg<KS_Dev_mem::TOGGLE_BIT>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::TOGGLE_BIT>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::MASK_AND: {
        Argument<KS_Dev_mem::MASK_AND> args;

        if(parse_arg<KS_Dev_mem::MASK_AND>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::MASK_AND>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::MASK_OR: {
        Argument<KS_Dev_mem::MASK_OR> args;

        if(parse_arg<KS_Dev_mem::MASK_OR>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Dev_mem::MASK_OR>(args, cmd.sess_id);
        return err;
      }
      case KS_Dev_mem::dev_mem_op_num:
      default:
          kserver->syslog.print(SysLog::ERROR, "KS_Dev_mem: Unknown operation\n");
          return -1;
    }
}

} // namespace kserver

