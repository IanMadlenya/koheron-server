/// @file ks_init_tasks.cpp
///
/// Autogenerated by Kdevgen 
/// (c) Koheron 2014-2015 

#include "ks_init_tasks.hpp"

#include "../core/commands.hpp"
#include "../core/kserver.hpp"
#include "../core/kserver_session.hpp"

namespace kserver {

#define THIS (static_cast<KS_Init_tasks*>(this))

/////////////////////////////////////
// SHOW_IP_ON_LEDS

template<>
template<>
int KDevice<KS_Init_tasks,INIT_TASKS>::
        parse_arg<KS_Init_tasks::SHOW_IP_ON_LEDS> (const Command& cmd,
                KDevice<KS_Init_tasks,INIT_TASKS>::
                Argument<KS_Init_tasks::SHOW_IP_ON_LEDS>& args)
{
    return 0;
}

template<>
template<>
int KDevice<KS_Init_tasks,INIT_TASKS>::
        execute_op<KS_Init_tasks::SHOW_IP_ON_LEDS> 
        (const Argument<KS_Init_tasks::SHOW_IP_ON_LEDS>& args, SessID sess_id)
{
    THIS->__init_tasks.show_ip_on_leds();
    return 0;
}

template<>
bool KDevice<KS_Init_tasks,INIT_TASKS>::is_failed(void)
{
    return false;
}

template<>
int KDevice<KS_Init_tasks,INIT_TASKS>::
        execute(const Command& cmd)
{
    int err;

    switch(cmd.operation) {
      case KS_Init_tasks::SHOW_IP_ON_LEDS: {
        Argument<KS_Init_tasks::SHOW_IP_ON_LEDS> args;

        if(parse_arg<KS_Init_tasks::SHOW_IP_ON_LEDS>(cmd, args) < 0) {
            return -1;
        }

        err = execute_op<KS_Init_tasks::SHOW_IP_ON_LEDS>(args, cmd.sess_id);
        return err;
      }
      case KS_Init_tasks::init_tasks_op_num:
      default:
          kserver->syslog.print(SysLog::ERROR, "KS_Init_tasks: Unknown operation\n");
          return -1;
    }
}

} // namespace kserver

